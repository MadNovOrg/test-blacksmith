type Mutation {
  acceptOrgInvite(
    profileId: String!
  ): AcceptOrgInviteOutput
}

type Mutation {
  createStripeSubscription(
    priceId: String!
    customerId: String!
  ): createSubscriptionOutput
}

type Mutation {
  createUser(
    input: CreateAppUserInput!
  ): CreateUserOutput!
}

type Mutation {
  declineInvite(
    note: String
  ): DeclineInviteOutput
}

type Mutation {
  declineOrgInvite: DeclineOrgInviteOutput
}

type Query {
  fetchPlans: [PlanObject]
}

type Query {
  getCoursePricing(
    input: GetCoursePricingInput!
  ): GetCoursePricingOutput
}

type Query {
  getInvite: CourseInvite
}

type Query {
  getOrgInvite: OrgInvite
}

type Query {
  getTrainersLevels(
    input: GetTrainersLevelsInput!
  ): [TrainerLevels]
}

type Query {
  initAuth: InitAuthOutput!
}

type Query {
  isUserSubscribedToMembership(
    customerId: String!
  ): isUserSubscribedToMembershipResponse
}

type Mutation {
  plansCreate(
    data: PlansCreateInput!
  ): PlansCreateResult
}

type Query {
  podcast(
    id: ID!
  ): PodcastPayload
}

type Query {
  podcasts(
    input: PodcastsInput
  ): PodcastsPayload
}

type Query {
  searchTrainers(
    input: SearchTrainersInput!
  ): [SearchTrainer]
}

type Mutation {
  stripeCreatePaymentIntent(
    input: StripeCreatePaymentIntentInput!
  ): StripeCreatePaymentIntentOutput
}

type Mutation {
  upsertZoomMeeting(
    input: UpsertZoomMeetingInput
  ): UpsertZoomMeetingPayload
}

type Mutation {
  verifyUser(
    inviteId: uuid!
  ): Boolean
}

type Mutation {
  xeroCallback(
    input: XeroCallbackInput!
  ): XeroCallbackOutput
}

type Query {
  xeroConnect: XeroConnectOutput
}

type Query {
  xeroContactSearch(
    input: XeroContactSearchInput!
  ): XeroContactSearchOutput
}

type Mutation {
  xeroDisconnect: XeroDisconnectOutput
}

enum BillingInterval {
  day
  week
  month
  year
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum CourseLevel {
  LEVEL_1
  LEVEL_2
  ADVANCED
  BILD_ACT
  INTERMEDIATE_TRAINER
  ADVANCED_TRAINER
  BILD_ACT_TRAINER
}

enum SearchTrainerAvailability {
  UNAVAILABLE
  AVAILABLE
  PENDING
  EXPIRED
}

enum CourseTrainerType {
  LEADER
  ASSISTANT
  MODERATOR
}

enum Currency {
  GBP
}

enum OrderDirection {
  ASC
  DESC
}

enum XeroContactStatus {
  ACTIVE
  ARCHIVED
  GDPRREQUEST
}

enum CourseType {
  OPEN
  CLOSED
  INDIRECT
}

input PlansCreateInput {
  name: String!
  currency: String!
  amount: Int!
  recurring_type: BillingInterval!
  recurring_count: Int!
  trial_type: BillingInterval!
  trial_count: Int!
}

input UpsertZoomMeetingInput {
  id: Float
  """ ISO 8601 date string, e.g. '2022-04-18T16:48:04.836Z' """ startTime: String
  """ Timezone string, e.g. Europe/London """ timezone: String
}

input GetTrainersLevelsInput {
  ids: [uuid!]!
  trainerType: CourseTrainerType!
  courseLevel: CourseLevel!
  courseStart: date!
  courseEnd: date!
}

input StripeCreatePaymentIntentInput {
  orderId: String!
}

input SearchTrainersInput {
  query: String
  trainerType: CourseTrainerType
  courseLevel: CourseLevel
  courseStart: date
  courseEnd: date
}

input Ordering {
  direction: OrderDirection
}

input PodcastsInput {
  term: String
  order: Ordering
  paging: Paging
}

input Paging {
  perPage: Int
  page: Int
}

input XeroCallbackInput {
  url: String!
}

input XeroContactSearchInput {
  searchTerm: String!
}

input CreateAppUserInput {
  firstName: String!
  lastName: String!
  password: String!
  phone: String
  dob: String
  acceptMarketing: Boolean!
  acceptTnc: Boolean!
}

input GetCoursePricingInput {
  courseId: Int!
}

type LinkProfileResult {
  status: Boolean!
}

type PlansCreateResult {
  id: String!
}

type PlanObject {
  id: String
  active: Boolean
  currency: String
  productName: String
  billingInterval: String
  unitAmount: Int
  name: String
}

type createSubscriptionOutput {
  subscriptionId: String!
  clientSecret: String!
}

type isUserSubscribedToMembershipResponse {
  isSubscribed: Boolean!
}

type DeclineInviteOutput {
  status: Boolean!
}

type DeclineOrgInviteOutput {
  id: uuid!
}

type AcceptOrgInviteOutput {
  id: uuid!
}

type Invite {
  status: InviteStatus
}

type CourseInvite {
  id: String!
  status: InviteStatus!
  courseId: String!
  courseName: String!
  description: String
  trainerName: String!
  startDate: String!
  endDate: String!
  venueName: String!
  venueAddress: Address
  venueCoordinates: String
}

type OrgInvite {
  id: String!
  orgName: String!
}

type Address {
  addressLineOne: String
  addressLineTwo: String
  city: String
  postCode: String
}

type UpsertZoomMeetingPayload {
  success: Boolean!
  meeting: ZoomMeeting
  userError: ZoomMeetingNotFoundError
}

type ZoomMeeting {
  id: Int!
  joinUrl: String!
}

type ZoomMeetingNotFoundError {
  id: String!
}

type TrainerLevels {
  profile_id: uuid!
  levels: [CourseLevel!]!
  availability: SearchTrainerAvailability!
}

type StripeCreatePaymentIntentOutput {
  clientSecret: String!
  amount: Float!
  currency: Currency!
}

type SearchTrainer {
  id: uuid!
  fullName: String!
  avatar: String
  levels: [CourseLevel!]!
  availability: SearchTrainerAvailability
}

type Podcast {
  id: String!
  name: String!
  description: String
  mediaUrl: String!
  author: String!
  publishedDate: String!
  thumbnail: String!
  episodeNumber: Int!
}

type PodcastsPayload {
  records: [Podcast!]!
  total: Int!
}

type PodcastPayload {
  podcast: Podcast
}

type XeroConnectOutput {
  consentUrl: String
}

type XeroCallbackOutput {
  status: Boolean!
}

type XeroContactSearchOutput {
  contacts: [XeroContact!]!
}

type XeroContact {
  contactID: ID!
  contactNumber: String
  contactStatus: XeroContactStatus!
  updatedDateUTC: date
  isCustomer: Boolean
  name: String!
  firstName: String
  lastName: String
  emailAddress: String
  phones: [XeroPhone]
  addresses: [XeroAddress]
}

type XeroPhone {
  phoneType: String
  phoneCountryCode: String
  phoneAreaCode: String
  phoneNumber: String
}

type XeroAddress {
  addressType: String
  addressLine1: String
  addressLine2: String
  city: String
  region: String
  postalCode: String
  country: String
}

type CreateUserOutput {
  cognitoId: String!
  profileId: String!
  email: String!
}

type InitAuthOutput {
  email: String!
  authChallenge: String!
}

type GetCoursePricingOutput {
  type: CourseType
  level: CourseLevel
  blended: Boolean
  reaccreditation: Boolean
  priceAmount: Float!
  priceCurrency: Currency!
  xeroCode: String!
}

type XeroDisconnectOutput {
  connected: Boolean!
}

