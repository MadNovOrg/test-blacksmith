type Mutation {
  createStripeSubscription(
    priceId: String!
    customerId: String!
  ): createSubscriptionOutput
}

type Mutation {
  declineInvite(note: String): DeclineInviteOutput
}

type Query {
  fetchPlans: [PlanObject]
}

type Query {
  getInvite: CourseInvite
}

type Query {
  getTrainersLevels(input: GetTrainersLevelsInput!): [TrainerLevels]
}

type Query {
  isUserSubscribedToMembership(
    customerId: String!
  ): isUserSubscribedToMembershipResponse
}

type Mutation {
  plansCreate(data: PlansCreateInput!): PlansCreateResult
}

type Mutation {
  upsertZoomMeeting(input: UpsertZoomMeetingInput): UpsertZoomMeetingPayload
}

enum BillingInterval {
  day
  week
  month
  year
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum CourseLevel {
  LEVEL_1
  LEVEL_2
  INTERMEDIATE
  ADVANCED
  BILD_ACT
}

enum SearchTrainerAvailability {
  UNAVAILABLE
  AVAILABLE
  PENDING
  EXPIRED
}

enum CourseTrainerType {
  LEADER
  ASSISTANT
  MODERATOR
}

input PlansCreateInput {
  name: String!
  currency: String!
  amount: Int!
  recurring_type: BillingInterval!
  recurring_count: Int!
  trial_type: BillingInterval!
  trial_count: Int!
}

input UpsertZoomMeetingInput {
  id: Float
  """
  ISO 8601 date string, e.g. '2022-04-18T16:48:04.836Z'
  """
  startTime: String
  """
  Timezone string, e.g. Europe/London
  """
  timezone: String
}

input GetTrainersLevelsInput {
  ids: [uuid!]!
  trainerType: CourseTrainerType!
  courseLevel: CourseLevel!
  courseStart: date!
  courseEnd: date!
}

type LinkProfileResult {
  status: Boolean!
}

type PlansCreateResult {
  id: String!
}

type PlanObject {
  id: String
  active: Boolean
  currency: String
  productName: String
  billingInterval: String
  unitAmount: Int
  name: String
}

type createSubscriptionOutput {
  subscriptionId: String!
  clientSecret: String!
}

type isUserSubscribedToMembershipResponse {
  isSubscribed: Boolean!
}

type DeclineInviteOutput {
  status: Boolean!
}

type Invite {
  status: InviteStatus
}

type CourseInvite {
  id: String!
  status: InviteStatus!
  courseId: String!
  courseName: String!
  description: String!
  trainerName: String!
  startDate: String!
  endDate: String!
  venueName: String!
  venueAddress: Address
  venueCoordinates: String
}

type Address {
  addressLineOne: String
  addressLineTwo: String
  city: String
  postCode: String
}

type UpsertZoomMeetingPayload {
  success: Boolean!
  meeting: ZoomMeeting
  userError: ZoomMeetingNotFoundError
}

type ZoomMeeting {
  id: Int!
  joinUrl: String!
}

type ZoomMeetingNotFoundError {
  id: String!
}

type TrainerLevels {
  profile_id: uuid!
  levels: [CourseLevel!]!
  availability: SearchTrainerAvailability!
}
